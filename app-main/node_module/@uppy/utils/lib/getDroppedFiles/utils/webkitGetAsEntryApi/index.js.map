{"version":3,"sources":["index.js"],"names":["getRelativePath","getFilesAndDirectoriesFromDirectory","getAsFileSystemHandleFromEntry","entry","logDropError","kind","isFile","isDirectory","undefined","getFile","Promise","resolve","reject","file","values","directoryReader","createReader","entries","onSuccess","dirEntries","map","createPromiseToAddFileOrParseDirectory","relativePath","handle","getFilesFromDataTransfer","dataTransfer","all","Array","from","items","item","lastResortFile","getAsFile","getAsFileSystemHandle","webkitGetAsEntry","err"],"mappings":";;MAAOA,e;;MACAC,mC;AAEP;AACA;AACA;;;AACA,SAASC,8BAAT,CAAyCC,KAAzC,EAAgDC,YAAhD,EAA8D;AAC5D,MAAID,KAAK,IAAI,IAAb,EAAmB,OAAOA,KAAP;AACnB,SAAO;AACL;AACAE,IAAAA,IAAI,EAAEF,KAAK,CAACG,MAAN,GAAe,MAAf,GAAwBH,KAAK,CAACI,WAAN,GAAoB,WAApB,GAAkCC,SAF3D;;AAGLC,IAAAA,OAAO,GAAI;AACT,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBT,KAAK,CAACU,IAAN,CAAWF,OAAX,EAAoBC,MAApB,CAAjC,CAAP;AACD,KALI;;AAML,WAAOE,MAAP,GAAiB;AACf;AACA,YAAMC,eAAe,GAAGZ,KAAK,CAACa,YAAN,EAAxB;AACA,YAAMC,OAAO,GAAG,MAAM,IAAIP,OAAJ,CAAYC,OAAO,IAAI;AAC3CV,QAAAA,mCAAmC,CAACc,eAAD,EAAkB,EAAlB,EAAsBX,YAAtB,EAAoC;AACrEc,UAAAA,SAAS,EAAGC,UAAD,IAAgBR,OAAO,CAACQ,UAAU,CAACC,GAAX,CAAeP,IAAI,IAAIX,8BAA8B,CAACW,IAAD,EAAOT,YAAP,CAArD,CAAD;AADmC,SAApC,CAAnC;AAGD,OAJqB,CAAtB;AAKA,aAAOa,OAAP;AACD;;AAfI,GAAP;AAiBD;;AAED,gBAAgBI,sCAAhB,CAAwDlB,KAAxD,EAA+D;AAC7D;AACA,MAAIA,KAAK,CAACE,IAAN,KAAe,MAAnB,EAA2B;AACzB,UAAMQ,IAAI,GAAG,MAAMV,KAAK,CAACM,OAAN,EAAnB;;AACA,QAAII,IAAI,KAAK,IAAb,EAAmB;AACjBA,MAAAA,IAAI,CAACS,YAAL,GAAoBtB,eAAe,CAACG,KAAD,CAAnC;AACA,YAAMU,IAAN;AACD;AACF,GAND,MAMO,IAAIV,KAAK,CAACE,IAAN,KAAe,WAAnB,EAAgC;AACrC,eAAW,MAAMkB,MAAjB,IAA2BpB,KAAK,CAACW,MAAN,EAA3B,EAA2C;AACzC,aAAOO,sCAAsC,CAACE,MAAD,CAA7C;AACD;AACF;AACF;;AAEc,gBAAgBC,wBAAhB,CAA0CC,YAA1C,EAAwDrB,YAAxD,EAAsE;AACnF,QAAMa,OAAO,GAAG,MAAMP,OAAO,CAACgB,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWH,YAAY,CAACI,KAAxB,EAA+B,MAAMC,IAAN,IAAc;AAAA;;AAC7E,UAAMC,cAAc,GAAGD,IAAI,CAACE,SAAL,EAAvB,CAD6E,CACrC;;AACxC,UAAM7B,KAAK,4BAAG,OAAM2B,IAAI,CAACG,qBAAX,oBAAMH,IAAI,CAACG,qBAAL,EAAN,CAAH,oCACN/B,8BAA8B,CAAC4B,IAAI,CAACI,gBAAL,EAAD,EAA0B9B,YAA1B,CADnC;AAGA,WAAO;AAAE2B,MAAAA,cAAF;AAAkB5B,MAAAA;AAAlB,KAAP;AACD,GANiC,CAAZ,CAAtB;;AAQA,OAAK,MAAM;AAAE4B,IAAAA,cAAF;AAAkB5B,IAAAA;AAAlB,GAAX,IAAwCc,OAAxC,EAAiD;AAC/C;AACA,QAAId,KAAK,IAAI,IAAb,EAAmB;AACjB,UAAI;AACF,eAAOkB,sCAAsC,CAAClB,KAAD,EAAQC,YAAR,CAA7C;AACD,OAFD,CAEE,OAAO+B,GAAP,EAAY;AACZ,YAAIJ,cAAJ,EAAoB;AAClB,gBAAMA,cAAN;AACD,SAFD,MAEO;AACL3B,UAAAA,YAAY,CAAC+B,GAAD,CAAZ;AACD;AACF;AACF;AACF;AACF;;iBAvB8BX,wB","sourcesContent":["import getRelativePath from './getRelativePath.js'\nimport getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.js'\n\n/**\n * Interop between deprecated webkitGetAsEntry and standard getAsFileSystemHandle.\n */\nfunction getAsFileSystemHandleFromEntry (entry, logDropError) {\n  if (entry == null) return entry\n  return {\n    // eslint-disable-next-line no-nested-ternary\n    kind: entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    getFile () {\n      return new Promise((resolve, reject) => entry.file(resolve, reject))\n    },\n    async* values () {\n      // If the file is a directory.\n      const directoryReader = entry.createReader()\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: (dirEntries) => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError))),\n        })\n      })\n      yield* entries\n    },\n  }\n}\n\nasync function* createPromiseToAddFileOrParseDirectory (entry) {\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  if (entry.kind === 'file') {\n    const file = await entry.getFile()\n    if (file !== null) {\n      file.relativePath = getRelativePath(entry)\n      yield file\n    }\n  } else if (entry.kind === 'directory') {\n    for await (const handle of entry.values()) {\n      yield* createPromiseToAddFileOrParseDirectory(handle)\n    }\n  }\n}\n\nexport default async function* getFilesFromDataTransfer (dataTransfer, logDropError) {\n  const entries = await Promise.all(Array.from(dataTransfer.items, async item => {\n    const lastResortFile = item.getAsFile() // Chromium bug, see https://github.com/transloadit/uppy/issues/3505.\n    const entry = await item.getAsFileSystemHandle?.()\n      ?? getAsFileSystemHandleFromEntry(item.webkitGetAsEntry(), logDropError)\n\n    return { lastResortFile, entry }\n  }))\n\n  for (const { lastResortFile, entry } of entries) {\n    // :entry can be null when we drop the url e.g.\n    if (entry != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(entry, logDropError)\n      } catch (err) {\n        if (lastResortFile) {\n          yield lastResortFile\n        } else {\n          logDropError(err)\n        }\n      }\n    }\n  }\n}\n"]}